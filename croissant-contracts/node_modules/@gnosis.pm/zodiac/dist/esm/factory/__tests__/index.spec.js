var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { expect } from "chai";
import { Contract } from "ethers";
import { ethers } from "hardhat";
import { ContractAddresses, ContractAbis, } from "../../contracts";
import { deployAndSetUpModule, deployAndSetUpCustomModule, getModuleInstance, getModuleFactoryAndMasterCopy, } from "../moduleDeployer";
import "@nomiclabs/hardhat-ethers";
import { KnownContracts } from "../types";
const AddressOne = "0x0000000000000000000000000000000000000001";
describe("Factory JS functions ", () => {
    //let newModuleAddress: string;
    let chainId;
    let mockContract;
    const saltNonce = "0x7255";
    const provider = ethers.provider;
    before(() => __awaiter(void 0, void 0, void 0, function* () {
        const Mock = yield ethers.getContractFactory("MockContract");
        mockContract = yield Mock.deploy();
        chainId = yield (yield provider.getNetwork()).chainId;
    }));
    it("should execute transaction and retrieve expected address ", () => __awaiter(void 0, void 0, void 0, function* () {
        const [signer] = yield ethers.getSigners();
        const args = {
            values: [
                AddressOne,
                AddressOne,
                AddressOne,
                100,
                180,
                2000,
                100000000,
                1,
            ],
            types: [
                "address",
                "address",
                "address",
                "uint32",
                "uint32",
                "uint32",
                "uint256",
                "uint256",
            ],
        };
        const { transaction: deployTx, expectedModuleAddress } = yield deployAndSetUpModule(KnownContracts.REALITY_ETH, args, provider, chainId, saltNonce);
        const transaction = yield signer.sendTransaction(deployTx);
        const receipt = yield transaction.wait();
        expect(receipt.transactionHash).to.be.a("string");
        expect(receipt.status).to.be.eq(1);
        expect(expectedModuleAddress).to.a("string");
        //newModuleAddress = expectedModuleAddress;
    }));
    it("should execute transaction and retrieve expected address when providing the address and ABI directly", () => __awaiter(void 0, void 0, void 0, function* () {
        const [signer] = yield ethers.getSigners();
        const args = {
            values: [
                AddressOne,
                AddressOne,
                AddressOne,
                100,
                180,
                2000,
                100000000,
                1,
            ],
            types: [
                "address",
                "address",
                "address",
                "uint32",
                "uint32",
                "uint32",
                "uint256",
                "uint256",
            ],
        };
        const chainContracts = ContractAddresses[chainId];
        const masterCopyAddress = chainContracts[KnownContracts.REALITY_ETH];
        const abi = ContractAbis[KnownContracts.REALITY_ETH];
        const { transaction: deployTx, expectedModuleAddress } = yield deployAndSetUpCustomModule(masterCopyAddress, abi, args, provider, chainId, saltNonce);
        const transaction = yield signer.sendTransaction(deployTx);
        const receipt = yield transaction.wait();
        expect(receipt.transactionHash).to.be.a("string");
        expect(receipt.status).to.be.eq(1);
        expect(expectedModuleAddress).to.a("string");
        //newModuleAddress = expectedModuleAddress;
    }));
    it("should retrieve module instance", () => __awaiter(void 0, void 0, void 0, function* () {
        const module = yield getModuleInstance(KnownContracts.REALITY_ETH, mockContract.address, provider);
        yield mockContract.givenMethodReturnBool(module.interface.getSighash("owner"), true);
        const owner = yield module.owner();
        expect(owner).to.equal("0x0000000000000000000000000000000000000001");
        expect(module).to.be.instanceOf(Contract);
    }));
    it("should retrieve factory and module instance", () => __awaiter(void 0, void 0, void 0, function* () {
        const { moduleFactory, moduleMastercopy } = yield getModuleFactoryAndMasterCopy(KnownContracts.REALITY_ETH, provider, chainId);
        expect(moduleFactory).to.be.instanceOf(Contract);
        expect(moduleMastercopy).to.be.instanceOf(Contract);
    }));
});
